// build.rs

use etc::{Etc, Tree, Write};
use std::{
    env,
    path::{Path, PathBuf},
};

struct BuildTree {
    root: PathBuf,
    substrate: PathBuf,
}

impl BuildTree {
    fn new(root: PathBuf, substrate: PathBuf) -> BuildTree {
        // update substrate
        // env::set_var("HTTP_TIMEOUT", "60");
        // gita::pull(&substrate, "origin", "master").unwrap();

        BuildTree { root, substrate }
    }

    fn tags(&self, f: &str) {
        let repo = gita::git2::Repository::open(&self.substrate).unwrap();
        let mut tags: Vec<String> = vec![];
        for tag in repo.tag_names(None).unwrap().iter() {
            if let Some(s) = tag {
                tags.push(s.into());
            }
        }

        // write to static file
        Etc::from(Path::new(&self.root).join(f).to_path_buf())
            .write(
                [
                    "/// Substrate tags",
                    "(This file is auto-generated by `/build.rs`)\n",
                    &format!("pub const SUBSTRATE_TAGS: &str = r#\"{:?}\"#;\n", &tags),
                ]
                .join(""),
            )
            .unwrap();
    }

    fn source(&self, f: &str) {
        let mut substrate = self.substrate.clone();
        substrate.push("bin/node-template");
        assert!(substrate.exists());

        // write to static file
        let mut tree = Tree::batch(Etc::from(substrate)).unwrap();
        tree.load().unwrap();
        tree.redir(env::temp_dir()).unwrap();
        Etc::from(Path::new(&self.root).join(f).to_path_buf())
            .write(
                [
                    "/// Node Tempalte tree source",
                    "(This file is auto-generated by `/build.rs`)\n",
                    &format!(
                        "pub const NODE_TEMPLATE: &str = r#\"{}\"#;\n",
                        &toml::to_string(&tree).unwrap()
                    ),
                ]
                .join(""),
            )
            .unwrap();
    }
}

fn main() {
    let mut root = env::current_dir().unwrap();
    let mut substrate = PathBuf::from(&root);
    root.push("src/registry");
    substrate.push("substrate");
    assert!(substrate.exists());
    assert!(root.exists());

    // generate substrate source
    let build = BuildTree::new(root, substrate);
    build.tags("tags.rs");
    build.source("node_template.rs");
}
