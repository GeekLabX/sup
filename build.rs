// build.rs

use etc::{Etc, Tree};
use std::{
    env, fs,
    path::{Path, PathBuf},
};

// use std::env;
// use std::fs;

fn main() {
    let root = env::current_dir().unwrap();

    // find substrate
    let mut substrate = PathBuf::from(&root);
    substrate.push("substrate");
    assert!(substrate.exists());

    // update substrate
    env::set_var("HTTP_TIMEOUT", "60");
    gita::pull(&substrate, "origin", "master").unwrap();

    // find node-template
    substrate.push("bin/node-template");
    assert!(substrate.exists());

    // write to static file
    let mut tree = Tree::batch(Etc::from(substrate)).unwrap();
    tree.load().unwrap();
    tree.redir(env::temp_dir()).unwrap();
    fs::write(
        Path::new(&root).join("src/cmds/node_template.rs"),
        [
            "/// Node Tempalte tree source",
            "(This file is auto-generated by `/build.rs`)\n",
            "pub const NODE_TEMPLATE: &str = r#\"{}\"#;\n",
        ]
        .join("")
        .replace("{}", &toml::to_string(&tree).unwrap()),
    )
    .unwrap();
}
